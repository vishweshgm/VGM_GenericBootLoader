
blinkyappl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08008000  08008000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000016d4  08008188  08008188  00008188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  0800985c  0800985c  0000985c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800986c  0800986c  0001000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800986c  0800986c  0000986c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009874  08009874  0001000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009874  08009874  00009874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009878  08009878  00009878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800987c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08009888  0001000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08009888  0001002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003a20  00000000  00000000  0001003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000d7b  00000000  00000000  00013a5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000003f0  00000000  00000000  000147d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000368  00000000  00000000  00014bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ed09  00000000  00000000  00014f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00003f30  00000000  00000000  00033c39  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb85e  00000000  00000000  00037b69  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f33c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e10  00000000  00000000  000f3444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08008188 <__do_global_dtors_aux>:
 8008188:	b510      	push	{r4, lr}
 800818a:	4c05      	ldr	r4, [pc, #20]	; (80081a0 <__do_global_dtors_aux+0x18>)
 800818c:	7823      	ldrb	r3, [r4, #0]
 800818e:	b933      	cbnz	r3, 800819e <__do_global_dtors_aux+0x16>
 8008190:	4b04      	ldr	r3, [pc, #16]	; (80081a4 <__do_global_dtors_aux+0x1c>)
 8008192:	b113      	cbz	r3, 800819a <__do_global_dtors_aux+0x12>
 8008194:	4804      	ldr	r0, [pc, #16]	; (80081a8 <__do_global_dtors_aux+0x20>)
 8008196:	f3af 8000 	nop.w
 800819a:	2301      	movs	r3, #1
 800819c:	7023      	strb	r3, [r4, #0]
 800819e:	bd10      	pop	{r4, pc}
 80081a0:	2000000c 	.word	0x2000000c
 80081a4:	00000000 	.word	0x00000000
 80081a8:	08009844 	.word	0x08009844

080081ac <frame_dummy>:
 80081ac:	b508      	push	{r3, lr}
 80081ae:	4b03      	ldr	r3, [pc, #12]	; (80081bc <frame_dummy+0x10>)
 80081b0:	b11b      	cbz	r3, 80081ba <frame_dummy+0xe>
 80081b2:	4903      	ldr	r1, [pc, #12]	; (80081c0 <frame_dummy+0x14>)
 80081b4:	4803      	ldr	r0, [pc, #12]	; (80081c4 <frame_dummy+0x18>)
 80081b6:	f3af 8000 	nop.w
 80081ba:	bd08      	pop	{r3, pc}
 80081bc:	00000000 	.word	0x00000000
 80081c0:	20000010 	.word	0x20000010
 80081c4:	08009844 	.word	0x08009844

080081c8 <__aeabi_uldivmod>:
 80081c8:	b953      	cbnz	r3, 80081e0 <__aeabi_uldivmod+0x18>
 80081ca:	b94a      	cbnz	r2, 80081e0 <__aeabi_uldivmod+0x18>
 80081cc:	2900      	cmp	r1, #0
 80081ce:	bf08      	it	eq
 80081d0:	2800      	cmpeq	r0, #0
 80081d2:	bf1c      	itt	ne
 80081d4:	f04f 31ff 	movne.w	r1, #4294967295
 80081d8:	f04f 30ff 	movne.w	r0, #4294967295
 80081dc:	f000 b972 	b.w	80084c4 <__aeabi_idiv0>
 80081e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80081e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80081e8:	f000 f806 	bl	80081f8 <__udivmoddi4>
 80081ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80081f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80081f4:	b004      	add	sp, #16
 80081f6:	4770      	bx	lr

080081f8 <__udivmoddi4>:
 80081f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081fc:	9e08      	ldr	r6, [sp, #32]
 80081fe:	4604      	mov	r4, r0
 8008200:	4688      	mov	r8, r1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d14b      	bne.n	800829e <__udivmoddi4+0xa6>
 8008206:	428a      	cmp	r2, r1
 8008208:	4615      	mov	r5, r2
 800820a:	d967      	bls.n	80082dc <__udivmoddi4+0xe4>
 800820c:	fab2 f282 	clz	r2, r2
 8008210:	b14a      	cbz	r2, 8008226 <__udivmoddi4+0x2e>
 8008212:	f1c2 0720 	rsb	r7, r2, #32
 8008216:	fa01 f302 	lsl.w	r3, r1, r2
 800821a:	fa20 f707 	lsr.w	r7, r0, r7
 800821e:	4095      	lsls	r5, r2
 8008220:	ea47 0803 	orr.w	r8, r7, r3
 8008224:	4094      	lsls	r4, r2
 8008226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800822a:	0c23      	lsrs	r3, r4, #16
 800822c:	fbb8 f7fe 	udiv	r7, r8, lr
 8008230:	fa1f fc85 	uxth.w	ip, r5
 8008234:	fb0e 8817 	mls	r8, lr, r7, r8
 8008238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800823c:	fb07 f10c 	mul.w	r1, r7, ip
 8008240:	4299      	cmp	r1, r3
 8008242:	d909      	bls.n	8008258 <__udivmoddi4+0x60>
 8008244:	18eb      	adds	r3, r5, r3
 8008246:	f107 30ff 	add.w	r0, r7, #4294967295
 800824a:	f080 811b 	bcs.w	8008484 <__udivmoddi4+0x28c>
 800824e:	4299      	cmp	r1, r3
 8008250:	f240 8118 	bls.w	8008484 <__udivmoddi4+0x28c>
 8008254:	3f02      	subs	r7, #2
 8008256:	442b      	add	r3, r5
 8008258:	1a5b      	subs	r3, r3, r1
 800825a:	b2a4      	uxth	r4, r4
 800825c:	fbb3 f0fe 	udiv	r0, r3, lr
 8008260:	fb0e 3310 	mls	r3, lr, r0, r3
 8008264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8008268:	fb00 fc0c 	mul.w	ip, r0, ip
 800826c:	45a4      	cmp	ip, r4
 800826e:	d909      	bls.n	8008284 <__udivmoddi4+0x8c>
 8008270:	192c      	adds	r4, r5, r4
 8008272:	f100 33ff 	add.w	r3, r0, #4294967295
 8008276:	f080 8107 	bcs.w	8008488 <__udivmoddi4+0x290>
 800827a:	45a4      	cmp	ip, r4
 800827c:	f240 8104 	bls.w	8008488 <__udivmoddi4+0x290>
 8008280:	3802      	subs	r0, #2
 8008282:	442c      	add	r4, r5
 8008284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008288:	eba4 040c 	sub.w	r4, r4, ip
 800828c:	2700      	movs	r7, #0
 800828e:	b11e      	cbz	r6, 8008298 <__udivmoddi4+0xa0>
 8008290:	40d4      	lsrs	r4, r2
 8008292:	2300      	movs	r3, #0
 8008294:	e9c6 4300 	strd	r4, r3, [r6]
 8008298:	4639      	mov	r1, r7
 800829a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800829e:	428b      	cmp	r3, r1
 80082a0:	d909      	bls.n	80082b6 <__udivmoddi4+0xbe>
 80082a2:	2e00      	cmp	r6, #0
 80082a4:	f000 80eb 	beq.w	800847e <__udivmoddi4+0x286>
 80082a8:	2700      	movs	r7, #0
 80082aa:	e9c6 0100 	strd	r0, r1, [r6]
 80082ae:	4638      	mov	r0, r7
 80082b0:	4639      	mov	r1, r7
 80082b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082b6:	fab3 f783 	clz	r7, r3
 80082ba:	2f00      	cmp	r7, #0
 80082bc:	d147      	bne.n	800834e <__udivmoddi4+0x156>
 80082be:	428b      	cmp	r3, r1
 80082c0:	d302      	bcc.n	80082c8 <__udivmoddi4+0xd0>
 80082c2:	4282      	cmp	r2, r0
 80082c4:	f200 80fa 	bhi.w	80084bc <__udivmoddi4+0x2c4>
 80082c8:	1a84      	subs	r4, r0, r2
 80082ca:	eb61 0303 	sbc.w	r3, r1, r3
 80082ce:	2001      	movs	r0, #1
 80082d0:	4698      	mov	r8, r3
 80082d2:	2e00      	cmp	r6, #0
 80082d4:	d0e0      	beq.n	8008298 <__udivmoddi4+0xa0>
 80082d6:	e9c6 4800 	strd	r4, r8, [r6]
 80082da:	e7dd      	b.n	8008298 <__udivmoddi4+0xa0>
 80082dc:	b902      	cbnz	r2, 80082e0 <__udivmoddi4+0xe8>
 80082de:	deff      	udf	#255	; 0xff
 80082e0:	fab2 f282 	clz	r2, r2
 80082e4:	2a00      	cmp	r2, #0
 80082e6:	f040 808f 	bne.w	8008408 <__udivmoddi4+0x210>
 80082ea:	1b49      	subs	r1, r1, r5
 80082ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80082f0:	fa1f f885 	uxth.w	r8, r5
 80082f4:	2701      	movs	r7, #1
 80082f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80082fa:	0c23      	lsrs	r3, r4, #16
 80082fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8008300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8008304:	fb08 f10c 	mul.w	r1, r8, ip
 8008308:	4299      	cmp	r1, r3
 800830a:	d907      	bls.n	800831c <__udivmoddi4+0x124>
 800830c:	18eb      	adds	r3, r5, r3
 800830e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8008312:	d202      	bcs.n	800831a <__udivmoddi4+0x122>
 8008314:	4299      	cmp	r1, r3
 8008316:	f200 80cd 	bhi.w	80084b4 <__udivmoddi4+0x2bc>
 800831a:	4684      	mov	ip, r0
 800831c:	1a59      	subs	r1, r3, r1
 800831e:	b2a3      	uxth	r3, r4
 8008320:	fbb1 f0fe 	udiv	r0, r1, lr
 8008324:	fb0e 1410 	mls	r4, lr, r0, r1
 8008328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800832c:	fb08 f800 	mul.w	r8, r8, r0
 8008330:	45a0      	cmp	r8, r4
 8008332:	d907      	bls.n	8008344 <__udivmoddi4+0x14c>
 8008334:	192c      	adds	r4, r5, r4
 8008336:	f100 33ff 	add.w	r3, r0, #4294967295
 800833a:	d202      	bcs.n	8008342 <__udivmoddi4+0x14a>
 800833c:	45a0      	cmp	r8, r4
 800833e:	f200 80b6 	bhi.w	80084ae <__udivmoddi4+0x2b6>
 8008342:	4618      	mov	r0, r3
 8008344:	eba4 0408 	sub.w	r4, r4, r8
 8008348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800834c:	e79f      	b.n	800828e <__udivmoddi4+0x96>
 800834e:	f1c7 0c20 	rsb	ip, r7, #32
 8008352:	40bb      	lsls	r3, r7
 8008354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8008358:	ea4e 0e03 	orr.w	lr, lr, r3
 800835c:	fa01 f407 	lsl.w	r4, r1, r7
 8008360:	fa20 f50c 	lsr.w	r5, r0, ip
 8008364:	fa21 f30c 	lsr.w	r3, r1, ip
 8008368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800836c:	4325      	orrs	r5, r4
 800836e:	fbb3 f9f8 	udiv	r9, r3, r8
 8008372:	0c2c      	lsrs	r4, r5, #16
 8008374:	fb08 3319 	mls	r3, r8, r9, r3
 8008378:	fa1f fa8e 	uxth.w	sl, lr
 800837c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8008380:	fb09 f40a 	mul.w	r4, r9, sl
 8008384:	429c      	cmp	r4, r3
 8008386:	fa02 f207 	lsl.w	r2, r2, r7
 800838a:	fa00 f107 	lsl.w	r1, r0, r7
 800838e:	d90b      	bls.n	80083a8 <__udivmoddi4+0x1b0>
 8008390:	eb1e 0303 	adds.w	r3, lr, r3
 8008394:	f109 30ff 	add.w	r0, r9, #4294967295
 8008398:	f080 8087 	bcs.w	80084aa <__udivmoddi4+0x2b2>
 800839c:	429c      	cmp	r4, r3
 800839e:	f240 8084 	bls.w	80084aa <__udivmoddi4+0x2b2>
 80083a2:	f1a9 0902 	sub.w	r9, r9, #2
 80083a6:	4473      	add	r3, lr
 80083a8:	1b1b      	subs	r3, r3, r4
 80083aa:	b2ad      	uxth	r5, r5
 80083ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80083b0:	fb08 3310 	mls	r3, r8, r0, r3
 80083b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80083b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80083bc:	45a2      	cmp	sl, r4
 80083be:	d908      	bls.n	80083d2 <__udivmoddi4+0x1da>
 80083c0:	eb1e 0404 	adds.w	r4, lr, r4
 80083c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083c8:	d26b      	bcs.n	80084a2 <__udivmoddi4+0x2aa>
 80083ca:	45a2      	cmp	sl, r4
 80083cc:	d969      	bls.n	80084a2 <__udivmoddi4+0x2aa>
 80083ce:	3802      	subs	r0, #2
 80083d0:	4474      	add	r4, lr
 80083d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80083d6:	fba0 8902 	umull	r8, r9, r0, r2
 80083da:	eba4 040a 	sub.w	r4, r4, sl
 80083de:	454c      	cmp	r4, r9
 80083e0:	46c2      	mov	sl, r8
 80083e2:	464b      	mov	r3, r9
 80083e4:	d354      	bcc.n	8008490 <__udivmoddi4+0x298>
 80083e6:	d051      	beq.n	800848c <__udivmoddi4+0x294>
 80083e8:	2e00      	cmp	r6, #0
 80083ea:	d069      	beq.n	80084c0 <__udivmoddi4+0x2c8>
 80083ec:	ebb1 050a 	subs.w	r5, r1, sl
 80083f0:	eb64 0403 	sbc.w	r4, r4, r3
 80083f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80083f8:	40fd      	lsrs	r5, r7
 80083fa:	40fc      	lsrs	r4, r7
 80083fc:	ea4c 0505 	orr.w	r5, ip, r5
 8008400:	e9c6 5400 	strd	r5, r4, [r6]
 8008404:	2700      	movs	r7, #0
 8008406:	e747      	b.n	8008298 <__udivmoddi4+0xa0>
 8008408:	f1c2 0320 	rsb	r3, r2, #32
 800840c:	fa20 f703 	lsr.w	r7, r0, r3
 8008410:	4095      	lsls	r5, r2
 8008412:	fa01 f002 	lsl.w	r0, r1, r2
 8008416:	fa21 f303 	lsr.w	r3, r1, r3
 800841a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800841e:	4338      	orrs	r0, r7
 8008420:	0c01      	lsrs	r1, r0, #16
 8008422:	fbb3 f7fe 	udiv	r7, r3, lr
 8008426:	fa1f f885 	uxth.w	r8, r5
 800842a:	fb0e 3317 	mls	r3, lr, r7, r3
 800842e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8008432:	fb07 f308 	mul.w	r3, r7, r8
 8008436:	428b      	cmp	r3, r1
 8008438:	fa04 f402 	lsl.w	r4, r4, r2
 800843c:	d907      	bls.n	800844e <__udivmoddi4+0x256>
 800843e:	1869      	adds	r1, r5, r1
 8008440:	f107 3cff 	add.w	ip, r7, #4294967295
 8008444:	d22f      	bcs.n	80084a6 <__udivmoddi4+0x2ae>
 8008446:	428b      	cmp	r3, r1
 8008448:	d92d      	bls.n	80084a6 <__udivmoddi4+0x2ae>
 800844a:	3f02      	subs	r7, #2
 800844c:	4429      	add	r1, r5
 800844e:	1acb      	subs	r3, r1, r3
 8008450:	b281      	uxth	r1, r0
 8008452:	fbb3 f0fe 	udiv	r0, r3, lr
 8008456:	fb0e 3310 	mls	r3, lr, r0, r3
 800845a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800845e:	fb00 f308 	mul.w	r3, r0, r8
 8008462:	428b      	cmp	r3, r1
 8008464:	d907      	bls.n	8008476 <__udivmoddi4+0x27e>
 8008466:	1869      	adds	r1, r5, r1
 8008468:	f100 3cff 	add.w	ip, r0, #4294967295
 800846c:	d217      	bcs.n	800849e <__udivmoddi4+0x2a6>
 800846e:	428b      	cmp	r3, r1
 8008470:	d915      	bls.n	800849e <__udivmoddi4+0x2a6>
 8008472:	3802      	subs	r0, #2
 8008474:	4429      	add	r1, r5
 8008476:	1ac9      	subs	r1, r1, r3
 8008478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800847c:	e73b      	b.n	80082f6 <__udivmoddi4+0xfe>
 800847e:	4637      	mov	r7, r6
 8008480:	4630      	mov	r0, r6
 8008482:	e709      	b.n	8008298 <__udivmoddi4+0xa0>
 8008484:	4607      	mov	r7, r0
 8008486:	e6e7      	b.n	8008258 <__udivmoddi4+0x60>
 8008488:	4618      	mov	r0, r3
 800848a:	e6fb      	b.n	8008284 <__udivmoddi4+0x8c>
 800848c:	4541      	cmp	r1, r8
 800848e:	d2ab      	bcs.n	80083e8 <__udivmoddi4+0x1f0>
 8008490:	ebb8 0a02 	subs.w	sl, r8, r2
 8008494:	eb69 020e 	sbc.w	r2, r9, lr
 8008498:	3801      	subs	r0, #1
 800849a:	4613      	mov	r3, r2
 800849c:	e7a4      	b.n	80083e8 <__udivmoddi4+0x1f0>
 800849e:	4660      	mov	r0, ip
 80084a0:	e7e9      	b.n	8008476 <__udivmoddi4+0x27e>
 80084a2:	4618      	mov	r0, r3
 80084a4:	e795      	b.n	80083d2 <__udivmoddi4+0x1da>
 80084a6:	4667      	mov	r7, ip
 80084a8:	e7d1      	b.n	800844e <__udivmoddi4+0x256>
 80084aa:	4681      	mov	r9, r0
 80084ac:	e77c      	b.n	80083a8 <__udivmoddi4+0x1b0>
 80084ae:	3802      	subs	r0, #2
 80084b0:	442c      	add	r4, r5
 80084b2:	e747      	b.n	8008344 <__udivmoddi4+0x14c>
 80084b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80084b8:	442b      	add	r3, r5
 80084ba:	e72f      	b.n	800831c <__udivmoddi4+0x124>
 80084bc:	4638      	mov	r0, r7
 80084be:	e708      	b.n	80082d2 <__udivmoddi4+0xda>
 80084c0:	4637      	mov	r7, r6
 80084c2:	e6e9      	b.n	8008298 <__udivmoddi4+0xa0>

080084c4 <__aeabi_idiv0>:
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop

080084c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80084cc:	f000 fa18 	bl	8008900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80084d0:	f000 f83a 	bl	8008548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80084d4:	f000 f8a2 	bl	800861c <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80084d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80084dc:	4819      	ldr	r0, [pc, #100]	; (8008544 <main+0x7c>)
 80084de:	f000 fd3c 	bl	8008f5a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80084e2:	2064      	movs	r0, #100	; 0x64
 80084e4:	f000 fa7e 	bl	80089e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 80084e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80084ec:	4815      	ldr	r0, [pc, #84]	; (8008544 <main+0x7c>)
 80084ee:	f000 fd34 	bl	8008f5a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 80084f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80084f6:	4813      	ldr	r0, [pc, #76]	; (8008544 <main+0x7c>)
 80084f8:	f000 fd2f 	bl	8008f5a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 80084fc:	2064      	movs	r0, #100	; 0x64
 80084fe:	f000 fa71 	bl	80089e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8008502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008506:	480f      	ldr	r0, [pc, #60]	; (8008544 <main+0x7c>)
 8008508:	f000 fd27 	bl	8008f5a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800850c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008510:	480c      	ldr	r0, [pc, #48]	; (8008544 <main+0x7c>)
 8008512:	f000 fd22 	bl	8008f5a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8008516:	2064      	movs	r0, #100	; 0x64
 8008518:	f000 fa64 	bl	80089e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 800851c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008520:	4808      	ldr	r0, [pc, #32]	; (8008544 <main+0x7c>)
 8008522:	f000 fd1a 	bl	8008f5a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8008526:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800852a:	4806      	ldr	r0, [pc, #24]	; (8008544 <main+0x7c>)
 800852c:	f000 fd15 	bl	8008f5a <HAL_GPIO_TogglePin>
	  HAL_Delay(100);
 8008530:	2064      	movs	r0, #100	; 0x64
 8008532:	f000 fa57 	bl	80089e4 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
 8008536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800853a:	4802      	ldr	r0, [pc, #8]	; (8008544 <main+0x7c>)
 800853c:	f000 fd0d 	bl	8008f5a <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOD, LD5_Pin);
 8008540:	e7ca      	b.n	80084d8 <main+0x10>
 8008542:	bf00      	nop
 8008544:	40020c00 	.word	0x40020c00

08008548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b094      	sub	sp, #80	; 0x50
 800854c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800854e:	f107 0320 	add.w	r3, r7, #32
 8008552:	2230      	movs	r2, #48	; 0x30
 8008554:	2100      	movs	r1, #0
 8008556:	4618      	mov	r0, r3
 8008558:	f001 f96c 	bl	8009834 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800855c:	f107 030c 	add.w	r3, r7, #12
 8008560:	2200      	movs	r2, #0
 8008562:	601a      	str	r2, [r3, #0]
 8008564:	605a      	str	r2, [r3, #4]
 8008566:	609a      	str	r2, [r3, #8]
 8008568:	60da      	str	r2, [r3, #12]
 800856a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800856c:	2300      	movs	r3, #0
 800856e:	60bb      	str	r3, [r7, #8]
 8008570:	4b28      	ldr	r3, [pc, #160]	; (8008614 <SystemClock_Config+0xcc>)
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	4a27      	ldr	r2, [pc, #156]	; (8008614 <SystemClock_Config+0xcc>)
 8008576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800857a:	6413      	str	r3, [r2, #64]	; 0x40
 800857c:	4b25      	ldr	r3, [pc, #148]	; (8008614 <SystemClock_Config+0xcc>)
 800857e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008584:	60bb      	str	r3, [r7, #8]
 8008586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008588:	2300      	movs	r3, #0
 800858a:	607b      	str	r3, [r7, #4]
 800858c:	4b22      	ldr	r3, [pc, #136]	; (8008618 <SystemClock_Config+0xd0>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a21      	ldr	r2, [pc, #132]	; (8008618 <SystemClock_Config+0xd0>)
 8008592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008596:	6013      	str	r3, [r2, #0]
 8008598:	4b1f      	ldr	r3, [pc, #124]	; (8008618 <SystemClock_Config+0xd0>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085a0:	607b      	str	r3, [r7, #4]
 80085a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80085ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085ae:	2302      	movs	r3, #2
 80085b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80085b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80085b8:	2308      	movs	r3, #8
 80085ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80085bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80085c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085c2:	2302      	movs	r3, #2
 80085c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80085c6:	2307      	movs	r3, #7
 80085c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085ca:	f107 0320 	add.w	r3, r7, #32
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 fcde 	bl	8008f90 <HAL_RCC_OscConfig>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <SystemClock_Config+0x96>
  {
    Error_Handler();
 80085da:	f000 f8fb 	bl	80087d4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085de:	230f      	movs	r3, #15
 80085e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085e2:	2302      	movs	r3, #2
 80085e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085e6:	2300      	movs	r3, #0
 80085e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80085ea:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80085ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80085f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80085f4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80085f6:	f107 030c 	add.w	r3, r7, #12
 80085fa:	2105      	movs	r1, #5
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 ff37 	bl	8009470 <HAL_RCC_ClockConfig>
 8008602:	4603      	mov	r3, r0
 8008604:	2b00      	cmp	r3, #0
 8008606:	d001      	beq.n	800860c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8008608:	f000 f8e4 	bl	80087d4 <Error_Handler>
  }
}
 800860c:	bf00      	nop
 800860e:	3750      	adds	r7, #80	; 0x50
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	40023800 	.word	0x40023800
 8008618:	40007000 	.word	0x40007000

0800861c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08c      	sub	sp, #48	; 0x30
 8008620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008622:	f107 031c 	add.w	r3, r7, #28
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]
 800862a:	605a      	str	r2, [r3, #4]
 800862c:	609a      	str	r2, [r3, #8]
 800862e:	60da      	str	r2, [r3, #12]
 8008630:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008632:	2300      	movs	r3, #0
 8008634:	61bb      	str	r3, [r7, #24]
 8008636:	4b60      	ldr	r3, [pc, #384]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	4a5f      	ldr	r2, [pc, #380]	; (80087b8 <MX_GPIO_Init+0x19c>)
 800863c:	f043 0310 	orr.w	r3, r3, #16
 8008640:	6313      	str	r3, [r2, #48]	; 0x30
 8008642:	4b5d      	ldr	r3, [pc, #372]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008646:	f003 0310 	and.w	r3, r3, #16
 800864a:	61bb      	str	r3, [r7, #24]
 800864c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800864e:	2300      	movs	r3, #0
 8008650:	617b      	str	r3, [r7, #20]
 8008652:	4b59      	ldr	r3, [pc, #356]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008656:	4a58      	ldr	r2, [pc, #352]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008658:	f043 0304 	orr.w	r3, r3, #4
 800865c:	6313      	str	r3, [r2, #48]	; 0x30
 800865e:	4b56      	ldr	r3, [pc, #344]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008662:	f003 0304 	and.w	r3, r3, #4
 8008666:	617b      	str	r3, [r7, #20]
 8008668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800866a:	2300      	movs	r3, #0
 800866c:	613b      	str	r3, [r7, #16]
 800866e:	4b52      	ldr	r3, [pc, #328]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008672:	4a51      	ldr	r2, [pc, #324]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008678:	6313      	str	r3, [r2, #48]	; 0x30
 800867a:	4b4f      	ldr	r3, [pc, #316]	; (80087b8 <MX_GPIO_Init+0x19c>)
 800867c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800867e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
 800868a:	4b4b      	ldr	r3, [pc, #300]	; (80087b8 <MX_GPIO_Init+0x19c>)
 800868c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800868e:	4a4a      	ldr	r2, [pc, #296]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008690:	f043 0301 	orr.w	r3, r3, #1
 8008694:	6313      	str	r3, [r2, #48]	; 0x30
 8008696:	4b48      	ldr	r3, [pc, #288]	; (80087b8 <MX_GPIO_Init+0x19c>)
 8008698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869a:	f003 0301 	and.w	r3, r3, #1
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80086a2:	2300      	movs	r3, #0
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	4b44      	ldr	r3, [pc, #272]	; (80087b8 <MX_GPIO_Init+0x19c>)
 80086a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086aa:	4a43      	ldr	r2, [pc, #268]	; (80087b8 <MX_GPIO_Init+0x19c>)
 80086ac:	f043 0302 	orr.w	r3, r3, #2
 80086b0:	6313      	str	r3, [r2, #48]	; 0x30
 80086b2:	4b41      	ldr	r3, [pc, #260]	; (80087b8 <MX_GPIO_Init+0x19c>)
 80086b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086b6:	f003 0302 	and.w	r3, r3, #2
 80086ba:	60bb      	str	r3, [r7, #8]
 80086bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80086be:	2300      	movs	r3, #0
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	4b3d      	ldr	r3, [pc, #244]	; (80087b8 <MX_GPIO_Init+0x19c>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	4a3c      	ldr	r2, [pc, #240]	; (80087b8 <MX_GPIO_Init+0x19c>)
 80086c8:	f043 0308 	orr.w	r3, r3, #8
 80086cc:	6313      	str	r3, [r2, #48]	; 0x30
 80086ce:	4b3a      	ldr	r3, [pc, #232]	; (80087b8 <MX_GPIO_Init+0x19c>)
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	f003 0308 	and.w	r3, r3, #8
 80086d6:	607b      	str	r3, [r7, #4]
 80086d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80086da:	2200      	movs	r2, #0
 80086dc:	2108      	movs	r1, #8
 80086de:	4837      	ldr	r0, [pc, #220]	; (80087bc <MX_GPIO_Init+0x1a0>)
 80086e0:	f000 fc22 	bl	8008f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80086e4:	2201      	movs	r2, #1
 80086e6:	2101      	movs	r1, #1
 80086e8:	4835      	ldr	r0, [pc, #212]	; (80087c0 <MX_GPIO_Init+0x1a4>)
 80086ea:	f000 fc1d 	bl	8008f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80086ee:	2200      	movs	r2, #0
 80086f0:	f24f 0110 	movw	r1, #61456	; 0xf010
 80086f4:	4833      	ldr	r0, [pc, #204]	; (80087c4 <MX_GPIO_Init+0x1a8>)
 80086f6:	f000 fc17 	bl	8008f28 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80086fa:	2308      	movs	r3, #8
 80086fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80086fe:	2301      	movs	r3, #1
 8008700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008702:	2300      	movs	r3, #0
 8008704:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008706:	2300      	movs	r3, #0
 8008708:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800870a:	f107 031c 	add.w	r3, r7, #28
 800870e:	4619      	mov	r1, r3
 8008710:	482a      	ldr	r0, [pc, #168]	; (80087bc <MX_GPIO_Init+0x1a0>)
 8008712:	f000 fa6f 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8008716:	2301      	movs	r3, #1
 8008718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800871a:	2301      	movs	r3, #1
 800871c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800871e:	2300      	movs	r3, #0
 8008720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008722:	2300      	movs	r3, #0
 8008724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8008726:	f107 031c 	add.w	r3, r7, #28
 800872a:	4619      	mov	r1, r3
 800872c:	4824      	ldr	r0, [pc, #144]	; (80087c0 <MX_GPIO_Init+0x1a4>)
 800872e:	f000 fa61 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8008732:	2301      	movs	r3, #1
 8008734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8008736:	4b24      	ldr	r3, [pc, #144]	; (80087c8 <MX_GPIO_Init+0x1ac>)
 8008738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800873a:	2300      	movs	r3, #0
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800873e:	f107 031c 	add.w	r3, r7, #28
 8008742:	4619      	mov	r1, r3
 8008744:	4821      	ldr	r0, [pc, #132]	; (80087cc <MX_GPIO_Init+0x1b0>)
 8008746:	f000 fa55 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800874a:	2304      	movs	r3, #4
 800874c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800874e:	2300      	movs	r3, #0
 8008750:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008752:	2300      	movs	r3, #0
 8008754:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8008756:	f107 031c 	add.w	r3, r7, #28
 800875a:	4619      	mov	r1, r3
 800875c:	481c      	ldr	r0, [pc, #112]	; (80087d0 <MX_GPIO_Init+0x1b4>)
 800875e:	f000 fa49 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8008762:	f24f 0310 	movw	r3, #61456	; 0xf010
 8008766:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008768:	2301      	movs	r3, #1
 800876a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800876c:	2300      	movs	r3, #0
 800876e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008770:	2300      	movs	r3, #0
 8008772:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008774:	f107 031c 	add.w	r3, r7, #28
 8008778:	4619      	mov	r1, r3
 800877a:	4812      	ldr	r0, [pc, #72]	; (80087c4 <MX_GPIO_Init+0x1a8>)
 800877c:	f000 fa3a 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8008780:	2320      	movs	r3, #32
 8008782:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008784:	2300      	movs	r3, #0
 8008786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008788:	2300      	movs	r3, #0
 800878a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800878c:	f107 031c 	add.w	r3, r7, #28
 8008790:	4619      	mov	r1, r3
 8008792:	480c      	ldr	r0, [pc, #48]	; (80087c4 <MX_GPIO_Init+0x1a8>)
 8008794:	f000 fa2e 	bl	8008bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8008798:	2302      	movs	r3, #2
 800879a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800879c:	4b0a      	ldr	r3, [pc, #40]	; (80087c8 <MX_GPIO_Init+0x1ac>)
 800879e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087a0:	2300      	movs	r3, #0
 80087a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80087a4:	f107 031c 	add.w	r3, r7, #28
 80087a8:	4619      	mov	r1, r3
 80087aa:	4804      	ldr	r0, [pc, #16]	; (80087bc <MX_GPIO_Init+0x1a0>)
 80087ac:	f000 fa22 	bl	8008bf4 <HAL_GPIO_Init>

}
 80087b0:	bf00      	nop
 80087b2:	3730      	adds	r7, #48	; 0x30
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	40023800 	.word	0x40023800
 80087bc:	40021000 	.word	0x40021000
 80087c0:	40020800 	.word	0x40020800
 80087c4:	40020c00 	.word	0x40020c00
 80087c8:	10120000 	.word	0x10120000
 80087cc:	40020000 	.word	0x40020000
 80087d0:	40020400 	.word	0x40020400

080087d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80087d4:	b480      	push	{r7}
 80087d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80087d8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80087da:	e7fe      	b.n	80087da <Error_Handler+0x6>

080087dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087e2:	2300      	movs	r3, #0
 80087e4:	607b      	str	r3, [r7, #4]
 80087e6:	4b10      	ldr	r3, [pc, #64]	; (8008828 <HAL_MspInit+0x4c>)
 80087e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ea:	4a0f      	ldr	r2, [pc, #60]	; (8008828 <HAL_MspInit+0x4c>)
 80087ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80087f0:	6453      	str	r3, [r2, #68]	; 0x44
 80087f2:	4b0d      	ldr	r3, [pc, #52]	; (8008828 <HAL_MspInit+0x4c>)
 80087f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80087fa:	607b      	str	r3, [r7, #4]
 80087fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80087fe:	2300      	movs	r3, #0
 8008800:	603b      	str	r3, [r7, #0]
 8008802:	4b09      	ldr	r3, [pc, #36]	; (8008828 <HAL_MspInit+0x4c>)
 8008804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008806:	4a08      	ldr	r2, [pc, #32]	; (8008828 <HAL_MspInit+0x4c>)
 8008808:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800880c:	6413      	str	r3, [r2, #64]	; 0x40
 800880e:	4b06      	ldr	r3, [pc, #24]	; (8008828 <HAL_MspInit+0x4c>)
 8008810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008812:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008816:	603b      	str	r3, [r7, #0]
 8008818:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800881a:	2007      	movs	r0, #7
 800881c:	f000 f9b6 	bl	8008b8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008820:	bf00      	nop
 8008822:	3708      	adds	r7, #8
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}
 8008828:	40023800 	.word	0x40023800

0800882c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800882c:	b480      	push	{r7}
 800882e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008830:	e7fe      	b.n	8008830 <NMI_Handler+0x4>

08008832 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008832:	b480      	push	{r7}
 8008834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008836:	e7fe      	b.n	8008836 <HardFault_Handler+0x4>

08008838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008838:	b480      	push	{r7}
 800883a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800883c:	e7fe      	b.n	800883c <MemManage_Handler+0x4>

0800883e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800883e:	b480      	push	{r7}
 8008840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008842:	e7fe      	b.n	8008842 <BusFault_Handler+0x4>

08008844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008844:	b480      	push	{r7}
 8008846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008848:	e7fe      	b.n	8008848 <UsageFault_Handler+0x4>

0800884a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800884a:	b480      	push	{r7}
 800884c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800884e:	bf00      	nop
 8008850:	46bd      	mov	sp, r7
 8008852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008856:	4770      	bx	lr

08008858 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008858:	b480      	push	{r7}
 800885a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800885c:	bf00      	nop
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008866:	b480      	push	{r7}
 8008868:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800886a:	bf00      	nop
 800886c:	46bd      	mov	sp, r7
 800886e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008872:	4770      	bx	lr

08008874 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008878:	f000 f894 	bl	80089a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800887c:	bf00      	nop
 800887e:	bd80      	pop	{r7, pc}

08008880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008884:	4b07      	ldr	r3, [pc, #28]	; (80088a4 <SystemInit+0x24>)
 8008886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888a:	4a06      	ldr	r2, [pc, #24]	; (80088a4 <SystemInit+0x24>)
 800888c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008894:	4b03      	ldr	r3, [pc, #12]	; (80088a4 <SystemInit+0x24>)
 8008896:	4a04      	ldr	r2, [pc, #16]	; (80088a8 <SystemInit+0x28>)
 8008898:	609a      	str	r2, [r3, #8]
#endif
}
 800889a:	bf00      	nop
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr
 80088a4:	e000ed00 	.word	0xe000ed00
 80088a8:	08008000 	.word	0x08008000

080088ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80088ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80088e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80088b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80088b2:	e003      	b.n	80088bc <LoopCopyDataInit>

080088b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80088b4:	4b0c      	ldr	r3, [pc, #48]	; (80088e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80088b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80088b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80088ba:	3104      	adds	r1, #4

080088bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80088bc:	480b      	ldr	r0, [pc, #44]	; (80088ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80088be:	4b0c      	ldr	r3, [pc, #48]	; (80088f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80088c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80088c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80088c4:	d3f6      	bcc.n	80088b4 <CopyDataInit>
  ldr  r2, =_sbss
 80088c6:	4a0b      	ldr	r2, [pc, #44]	; (80088f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80088c8:	e002      	b.n	80088d0 <LoopFillZerobss>

080088ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80088ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80088cc:	f842 3b04 	str.w	r3, [r2], #4

080088d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80088d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80088d4:	d3f9      	bcc.n	80088ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80088d6:	f7ff ffd3 	bl	8008880 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80088da:	f000 ff87 	bl	80097ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80088de:	f7ff fdf3 	bl	80084c8 <main>
  bx  lr    
 80088e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80088e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80088e8:	0800987c 	.word	0x0800987c
  ldr  r0, =_sdata
 80088ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80088f0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80088f4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80088f8:	2000002c 	.word	0x2000002c

080088fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80088fc:	e7fe      	b.n	80088fc <ADC_IRQHandler>
	...

08008900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008904:	4b0e      	ldr	r3, [pc, #56]	; (8008940 <HAL_Init+0x40>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a0d      	ldr	r2, [pc, #52]	; (8008940 <HAL_Init+0x40>)
 800890a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800890e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008910:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <HAL_Init+0x40>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a0a      	ldr	r2, [pc, #40]	; (8008940 <HAL_Init+0x40>)
 8008916:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800891a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800891c:	4b08      	ldr	r3, [pc, #32]	; (8008940 <HAL_Init+0x40>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a07      	ldr	r2, [pc, #28]	; (8008940 <HAL_Init+0x40>)
 8008922:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008928:	2003      	movs	r0, #3
 800892a:	f000 f92f 	bl	8008b8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800892e:	2000      	movs	r0, #0
 8008930:	f000 f808 	bl	8008944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008934:	f7ff ff52 	bl	80087dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008938:	2300      	movs	r3, #0
}
 800893a:	4618      	mov	r0, r3
 800893c:	bd80      	pop	{r7, pc}
 800893e:	bf00      	nop
 8008940:	40023c00 	.word	0x40023c00

08008944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800894c:	4b12      	ldr	r3, [pc, #72]	; (8008998 <HAL_InitTick+0x54>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	4b12      	ldr	r3, [pc, #72]	; (800899c <HAL_InitTick+0x58>)
 8008952:	781b      	ldrb	r3, [r3, #0]
 8008954:	4619      	mov	r1, r3
 8008956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800895a:	fbb3 f3f1 	udiv	r3, r3, r1
 800895e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008962:	4618      	mov	r0, r3
 8008964:	f000 f939 	bl	8008bda <HAL_SYSTICK_Config>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d001      	beq.n	8008972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800896e:	2301      	movs	r3, #1
 8008970:	e00e      	b.n	8008990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b0f      	cmp	r3, #15
 8008976:	d80a      	bhi.n	800898e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008978:	2200      	movs	r2, #0
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	f04f 30ff 	mov.w	r0, #4294967295
 8008980:	f000 f90f 	bl	8008ba2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008984:	4a06      	ldr	r2, [pc, #24]	; (80089a0 <HAL_InitTick+0x5c>)
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800898a:	2300      	movs	r3, #0
 800898c:	e000      	b.n	8008990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
}
 8008990:	4618      	mov	r0, r3
 8008992:	3708      	adds	r7, #8
 8008994:	46bd      	mov	sp, r7
 8008996:	bd80      	pop	{r7, pc}
 8008998:	20000000 	.word	0x20000000
 800899c:	20000008 	.word	0x20000008
 80089a0:	20000004 	.word	0x20000004

080089a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80089a8:	4b06      	ldr	r3, [pc, #24]	; (80089c4 <HAL_IncTick+0x20>)
 80089aa:	781b      	ldrb	r3, [r3, #0]
 80089ac:	461a      	mov	r2, r3
 80089ae:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <HAL_IncTick+0x24>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4413      	add	r3, r2
 80089b4:	4a04      	ldr	r2, [pc, #16]	; (80089c8 <HAL_IncTick+0x24>)
 80089b6:	6013      	str	r3, [r2, #0]
}
 80089b8:	bf00      	nop
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000008 	.word	0x20000008
 80089c8:	20000028 	.word	0x20000028

080089cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089cc:	b480      	push	{r7}
 80089ce:	af00      	add	r7, sp, #0
  return uwTick;
 80089d0:	4b03      	ldr	r3, [pc, #12]	; (80089e0 <HAL_GetTick+0x14>)
 80089d2:	681b      	ldr	r3, [r3, #0]
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	46bd      	mov	sp, r7
 80089d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089dc:	4770      	bx	lr
 80089de:	bf00      	nop
 80089e0:	20000028 	.word	0x20000028

080089e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80089ec:	f7ff ffee 	bl	80089cc <HAL_GetTick>
 80089f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089fc:	d005      	beq.n	8008a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80089fe:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <HAL_Delay+0x40>)
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	461a      	mov	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	4413      	add	r3, r2
 8008a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008a0a:	bf00      	nop
 8008a0c:	f7ff ffde 	bl	80089cc <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	68fa      	ldr	r2, [r7, #12]
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d8f7      	bhi.n	8008a0c <HAL_Delay+0x28>
  {
  }
}
 8008a1c:	bf00      	nop
 8008a1e:	3710      	adds	r7, #16
 8008a20:	46bd      	mov	sp, r7
 8008a22:	bd80      	pop	{r7, pc}
 8008a24:	20000008 	.word	0x20000008

08008a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f003 0307 	and.w	r3, r3, #7
 8008a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a38:	4b0c      	ldr	r3, [pc, #48]	; (8008a6c <__NVIC_SetPriorityGrouping+0x44>)
 8008a3a:	68db      	ldr	r3, [r3, #12]
 8008a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a44:	4013      	ands	r3, r2
 8008a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a5a:	4a04      	ldr	r2, [pc, #16]	; (8008a6c <__NVIC_SetPriorityGrouping+0x44>)
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	60d3      	str	r3, [r2, #12]
}
 8008a60:	bf00      	nop
 8008a62:	3714      	adds	r7, #20
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr
 8008a6c:	e000ed00 	.word	0xe000ed00

08008a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a70:	b480      	push	{r7}
 8008a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a74:	4b04      	ldr	r3, [pc, #16]	; (8008a88 <__NVIC_GetPriorityGrouping+0x18>)
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	0a1b      	lsrs	r3, r3, #8
 8008a7a:	f003 0307 	and.w	r3, r3, #7
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	46bd      	mov	sp, r7
 8008a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a86:	4770      	bx	lr
 8008a88:	e000ed00 	.word	0xe000ed00

08008a8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	4603      	mov	r3, r0
 8008a94:	6039      	str	r1, [r7, #0]
 8008a96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	db0a      	blt.n	8008ab6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	b2da      	uxtb	r2, r3
 8008aa4:	490c      	ldr	r1, [pc, #48]	; (8008ad8 <__NVIC_SetPriority+0x4c>)
 8008aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008aaa:	0112      	lsls	r2, r2, #4
 8008aac:	b2d2      	uxtb	r2, r2
 8008aae:	440b      	add	r3, r1
 8008ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008ab4:	e00a      	b.n	8008acc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	4908      	ldr	r1, [pc, #32]	; (8008adc <__NVIC_SetPriority+0x50>)
 8008abc:	79fb      	ldrb	r3, [r7, #7]
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	3b04      	subs	r3, #4
 8008ac4:	0112      	lsls	r2, r2, #4
 8008ac6:	b2d2      	uxtb	r2, r2
 8008ac8:	440b      	add	r3, r1
 8008aca:	761a      	strb	r2, [r3, #24]
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	e000e100 	.word	0xe000e100
 8008adc:	e000ed00 	.word	0xe000ed00

08008ae0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	b089      	sub	sp, #36	; 0x24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	f003 0307 	and.w	r3, r3, #7
 8008af2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	f1c3 0307 	rsb	r3, r3, #7
 8008afa:	2b04      	cmp	r3, #4
 8008afc:	bf28      	it	cs
 8008afe:	2304      	movcs	r3, #4
 8008b00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b02:	69fb      	ldr	r3, [r7, #28]
 8008b04:	3304      	adds	r3, #4
 8008b06:	2b06      	cmp	r3, #6
 8008b08:	d902      	bls.n	8008b10 <NVIC_EncodePriority+0x30>
 8008b0a:	69fb      	ldr	r3, [r7, #28]
 8008b0c:	3b03      	subs	r3, #3
 8008b0e:	e000      	b.n	8008b12 <NVIC_EncodePriority+0x32>
 8008b10:	2300      	movs	r3, #0
 8008b12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b14:	f04f 32ff 	mov.w	r2, #4294967295
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1e:	43da      	mvns	r2, r3
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	401a      	ands	r2, r3
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b28:	f04f 31ff 	mov.w	r1, #4294967295
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b32:	43d9      	mvns	r1, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b38:	4313      	orrs	r3, r2
         );
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3724      	adds	r7, #36	; 0x24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
	...

08008b48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b082      	sub	sp, #8
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3b01      	subs	r3, #1
 8008b54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008b58:	d301      	bcc.n	8008b5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e00f      	b.n	8008b7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b5e:	4a0a      	ldr	r2, [pc, #40]	; (8008b88 <SysTick_Config+0x40>)
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3b01      	subs	r3, #1
 8008b64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b66:	210f      	movs	r1, #15
 8008b68:	f04f 30ff 	mov.w	r0, #4294967295
 8008b6c:	f7ff ff8e 	bl	8008a8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b70:	4b05      	ldr	r3, [pc, #20]	; (8008b88 <SysTick_Config+0x40>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b76:	4b04      	ldr	r3, [pc, #16]	; (8008b88 <SysTick_Config+0x40>)
 8008b78:	2207      	movs	r2, #7
 8008b7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3708      	adds	r7, #8
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	e000e010 	.word	0xe000e010

08008b8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f7ff ff47 	bl	8008a28 <__NVIC_SetPriorityGrouping>
}
 8008b9a:	bf00      	nop
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ba2:	b580      	push	{r7, lr}
 8008ba4:	b086      	sub	sp, #24
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	4603      	mov	r3, r0
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
 8008bae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bb4:	f7ff ff5c 	bl	8008a70 <__NVIC_GetPriorityGrouping>
 8008bb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	68b9      	ldr	r1, [r7, #8]
 8008bbe:	6978      	ldr	r0, [r7, #20]
 8008bc0:	f7ff ff8e 	bl	8008ae0 <NVIC_EncodePriority>
 8008bc4:	4602      	mov	r2, r0
 8008bc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7ff ff5d 	bl	8008a8c <__NVIC_SetPriority>
}
 8008bd2:	bf00      	nop
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b082      	sub	sp, #8
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f7ff ffb0 	bl	8008b48 <SysTick_Config>
 8008be8:	4603      	mov	r3, r0
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
	...

08008bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b089      	sub	sp, #36	; 0x24
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c02:	2300      	movs	r3, #0
 8008c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c06:	2300      	movs	r3, #0
 8008c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	61fb      	str	r3, [r7, #28]
 8008c0e:	e16b      	b.n	8008ee8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c10:	2201      	movs	r2, #1
 8008c12:	69fb      	ldr	r3, [r7, #28]
 8008c14:	fa02 f303 	lsl.w	r3, r2, r3
 8008c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	4013      	ands	r3, r2
 8008c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	f040 815a 	bne.w	8008ee2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d00b      	beq.n	8008c4e <HAL_GPIO_Init+0x5a>
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d007      	beq.n	8008c4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008c42:	2b11      	cmp	r3, #17
 8008c44:	d003      	beq.n	8008c4e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	2b12      	cmp	r3, #18
 8008c4c:	d130      	bne.n	8008cb0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	2203      	movs	r2, #3
 8008c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c5e:	43db      	mvns	r3, r3
 8008c60:	69ba      	ldr	r2, [r7, #24]
 8008c62:	4013      	ands	r3, r2
 8008c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	69fb      	ldr	r3, [r7, #28]
 8008c6c:	005b      	lsls	r3, r3, #1
 8008c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	4313      	orrs	r3, r2
 8008c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	685b      	ldr	r3, [r3, #4]
 8008c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008c84:	2201      	movs	r2, #1
 8008c86:	69fb      	ldr	r3, [r7, #28]
 8008c88:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	4013      	ands	r3, r2
 8008c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	091b      	lsrs	r3, r3, #4
 8008c9a:	f003 0201 	and.w	r2, r3, #1
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	69ba      	ldr	r2, [r7, #24]
 8008cae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	68db      	ldr	r3, [r3, #12]
 8008cb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008cb6:	69fb      	ldr	r3, [r7, #28]
 8008cb8:	005b      	lsls	r3, r3, #1
 8008cba:	2203      	movs	r2, #3
 8008cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cc0:	43db      	mvns	r3, r3
 8008cc2:	69ba      	ldr	r2, [r7, #24]
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	689a      	ldr	r2, [r3, #8]
 8008ccc:	69fb      	ldr	r3, [r7, #28]
 8008cce:	005b      	lsls	r3, r3, #1
 8008cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd4:	69ba      	ldr	r2, [r7, #24]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	69ba      	ldr	r2, [r7, #24]
 8008cde:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2b02      	cmp	r3, #2
 8008ce6:	d003      	beq.n	8008cf0 <HAL_GPIO_Init+0xfc>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	685b      	ldr	r3, [r3, #4]
 8008cec:	2b12      	cmp	r3, #18
 8008cee:	d123      	bne.n	8008d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008cf0:	69fb      	ldr	r3, [r7, #28]
 8008cf2:	08da      	lsrs	r2, r3, #3
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	3208      	adds	r2, #8
 8008cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008cfe:	69fb      	ldr	r3, [r7, #28]
 8008d00:	f003 0307 	and.w	r3, r3, #7
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	220f      	movs	r2, #15
 8008d08:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0c:	43db      	mvns	r3, r3
 8008d0e:	69ba      	ldr	r2, [r7, #24]
 8008d10:	4013      	ands	r3, r2
 8008d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	691a      	ldr	r2, [r3, #16]
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f003 0307 	and.w	r3, r3, #7
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	fa02 f303 	lsl.w	r3, r2, r3
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	4313      	orrs	r3, r2
 8008d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	08da      	lsrs	r2, r3, #3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3208      	adds	r2, #8
 8008d32:	69b9      	ldr	r1, [r7, #24]
 8008d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	005b      	lsls	r3, r3, #1
 8008d42:	2203      	movs	r2, #3
 8008d44:	fa02 f303 	lsl.w	r3, r2, r3
 8008d48:	43db      	mvns	r3, r3
 8008d4a:	69ba      	ldr	r2, [r7, #24]
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	f003 0203 	and.w	r2, r3, #3
 8008d58:	69fb      	ldr	r3, [r7, #28]
 8008d5a:	005b      	lsls	r3, r3, #1
 8008d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d60:	69ba      	ldr	r2, [r7, #24]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008d6c:	683b      	ldr	r3, [r7, #0]
 8008d6e:	685b      	ldr	r3, [r3, #4]
 8008d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 80b4 	beq.w	8008ee2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	60fb      	str	r3, [r7, #12]
 8008d7e:	4b5f      	ldr	r3, [pc, #380]	; (8008efc <HAL_GPIO_Init+0x308>)
 8008d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d82:	4a5e      	ldr	r2, [pc, #376]	; (8008efc <HAL_GPIO_Init+0x308>)
 8008d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d88:	6453      	str	r3, [r2, #68]	; 0x44
 8008d8a:	4b5c      	ldr	r3, [pc, #368]	; (8008efc <HAL_GPIO_Init+0x308>)
 8008d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d92:	60fb      	str	r3, [r7, #12]
 8008d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008d96:	4a5a      	ldr	r2, [pc, #360]	; (8008f00 <HAL_GPIO_Init+0x30c>)
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	089b      	lsrs	r3, r3, #2
 8008d9c:	3302      	adds	r3, #2
 8008d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	f003 0303 	and.w	r3, r3, #3
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	220f      	movs	r2, #15
 8008dae:	fa02 f303 	lsl.w	r3, r2, r3
 8008db2:	43db      	mvns	r3, r3
 8008db4:	69ba      	ldr	r2, [r7, #24]
 8008db6:	4013      	ands	r3, r2
 8008db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a51      	ldr	r2, [pc, #324]	; (8008f04 <HAL_GPIO_Init+0x310>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d02b      	beq.n	8008e1a <HAL_GPIO_Init+0x226>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4a50      	ldr	r2, [pc, #320]	; (8008f08 <HAL_GPIO_Init+0x314>)
 8008dc6:	4293      	cmp	r3, r2
 8008dc8:	d025      	beq.n	8008e16 <HAL_GPIO_Init+0x222>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	4a4f      	ldr	r2, [pc, #316]	; (8008f0c <HAL_GPIO_Init+0x318>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d01f      	beq.n	8008e12 <HAL_GPIO_Init+0x21e>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4a4e      	ldr	r2, [pc, #312]	; (8008f10 <HAL_GPIO_Init+0x31c>)
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d019      	beq.n	8008e0e <HAL_GPIO_Init+0x21a>
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	4a4d      	ldr	r2, [pc, #308]	; (8008f14 <HAL_GPIO_Init+0x320>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d013      	beq.n	8008e0a <HAL_GPIO_Init+0x216>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	4a4c      	ldr	r2, [pc, #304]	; (8008f18 <HAL_GPIO_Init+0x324>)
 8008de6:	4293      	cmp	r3, r2
 8008de8:	d00d      	beq.n	8008e06 <HAL_GPIO_Init+0x212>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	4a4b      	ldr	r2, [pc, #300]	; (8008f1c <HAL_GPIO_Init+0x328>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d007      	beq.n	8008e02 <HAL_GPIO_Init+0x20e>
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	4a4a      	ldr	r2, [pc, #296]	; (8008f20 <HAL_GPIO_Init+0x32c>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d101      	bne.n	8008dfe <HAL_GPIO_Init+0x20a>
 8008dfa:	2307      	movs	r3, #7
 8008dfc:	e00e      	b.n	8008e1c <HAL_GPIO_Init+0x228>
 8008dfe:	2308      	movs	r3, #8
 8008e00:	e00c      	b.n	8008e1c <HAL_GPIO_Init+0x228>
 8008e02:	2306      	movs	r3, #6
 8008e04:	e00a      	b.n	8008e1c <HAL_GPIO_Init+0x228>
 8008e06:	2305      	movs	r3, #5
 8008e08:	e008      	b.n	8008e1c <HAL_GPIO_Init+0x228>
 8008e0a:	2304      	movs	r3, #4
 8008e0c:	e006      	b.n	8008e1c <HAL_GPIO_Init+0x228>
 8008e0e:	2303      	movs	r3, #3
 8008e10:	e004      	b.n	8008e1c <HAL_GPIO_Init+0x228>
 8008e12:	2302      	movs	r3, #2
 8008e14:	e002      	b.n	8008e1c <HAL_GPIO_Init+0x228>
 8008e16:	2301      	movs	r3, #1
 8008e18:	e000      	b.n	8008e1c <HAL_GPIO_Init+0x228>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	69fa      	ldr	r2, [r7, #28]
 8008e1e:	f002 0203 	and.w	r2, r2, #3
 8008e22:	0092      	lsls	r2, r2, #2
 8008e24:	4093      	lsls	r3, r2
 8008e26:	69ba      	ldr	r2, [r7, #24]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e2c:	4934      	ldr	r1, [pc, #208]	; (8008f00 <HAL_GPIO_Init+0x30c>)
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	089b      	lsrs	r3, r3, #2
 8008e32:	3302      	adds	r3, #2
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008e3a:	4b3a      	ldr	r3, [pc, #232]	; (8008f24 <HAL_GPIO_Init+0x330>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e40:	693b      	ldr	r3, [r7, #16]
 8008e42:	43db      	mvns	r3, r3
 8008e44:	69ba      	ldr	r2, [r7, #24]
 8008e46:	4013      	ands	r3, r2
 8008e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d003      	beq.n	8008e5e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008e5e:	4a31      	ldr	r2, [pc, #196]	; (8008f24 <HAL_GPIO_Init+0x330>)
 8008e60:	69bb      	ldr	r3, [r7, #24]
 8008e62:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008e64:	4b2f      	ldr	r3, [pc, #188]	; (8008f24 <HAL_GPIO_Init+0x330>)
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	43db      	mvns	r3, r3
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	4013      	ands	r3, r2
 8008e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	685b      	ldr	r3, [r3, #4]
 8008e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d003      	beq.n	8008e88 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	693b      	ldr	r3, [r7, #16]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008e88:	4a26      	ldr	r2, [pc, #152]	; (8008f24 <HAL_GPIO_Init+0x330>)
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e8e:	4b25      	ldr	r3, [pc, #148]	; (8008f24 <HAL_GPIO_Init+0x330>)
 8008e90:	689b      	ldr	r3, [r3, #8]
 8008e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	43db      	mvns	r3, r3
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	4013      	ands	r3, r2
 8008e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	685b      	ldr	r3, [r3, #4]
 8008ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d003      	beq.n	8008eb2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008eaa:	69ba      	ldr	r2, [r7, #24]
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008eb2:	4a1c      	ldr	r2, [pc, #112]	; (8008f24 <HAL_GPIO_Init+0x330>)
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008eb8:	4b1a      	ldr	r3, [pc, #104]	; (8008f24 <HAL_GPIO_Init+0x330>)
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ebe:	693b      	ldr	r3, [r7, #16]
 8008ec0:	43db      	mvns	r3, r3
 8008ec2:	69ba      	ldr	r2, [r7, #24]
 8008ec4:	4013      	ands	r3, r2
 8008ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685b      	ldr	r3, [r3, #4]
 8008ecc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d003      	beq.n	8008edc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008ed4:	69ba      	ldr	r2, [r7, #24]
 8008ed6:	693b      	ldr	r3, [r7, #16]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008edc:	4a11      	ldr	r2, [pc, #68]	; (8008f24 <HAL_GPIO_Init+0x330>)
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008ee2:	69fb      	ldr	r3, [r7, #28]
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	61fb      	str	r3, [r7, #28]
 8008ee8:	69fb      	ldr	r3, [r7, #28]
 8008eea:	2b0f      	cmp	r3, #15
 8008eec:	f67f ae90 	bls.w	8008c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008ef0:	bf00      	nop
 8008ef2:	3724      	adds	r7, #36	; 0x24
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr
 8008efc:	40023800 	.word	0x40023800
 8008f00:	40013800 	.word	0x40013800
 8008f04:	40020000 	.word	0x40020000
 8008f08:	40020400 	.word	0x40020400
 8008f0c:	40020800 	.word	0x40020800
 8008f10:	40020c00 	.word	0x40020c00
 8008f14:	40021000 	.word	0x40021000
 8008f18:	40021400 	.word	0x40021400
 8008f1c:	40021800 	.word	0x40021800
 8008f20:	40021c00 	.word	0x40021c00
 8008f24:	40013c00 	.word	0x40013c00

08008f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f28:	b480      	push	{r7}
 8008f2a:	b083      	sub	sp, #12
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	460b      	mov	r3, r1
 8008f32:	807b      	strh	r3, [r7, #2]
 8008f34:	4613      	mov	r3, r2
 8008f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f38:	787b      	ldrb	r3, [r7, #1]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d003      	beq.n	8008f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f3e:	887a      	ldrh	r2, [r7, #2]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f44:	e003      	b.n	8008f4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f46:	887b      	ldrh	r3, [r7, #2]
 8008f48:	041a      	lsls	r2, r3, #16
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	619a      	str	r2, [r3, #24]
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008f5a:	b480      	push	{r7}
 8008f5c:	b083      	sub	sp, #12
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	6078      	str	r0, [r7, #4]
 8008f62:	460b      	mov	r3, r1
 8008f64:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	695a      	ldr	r2, [r3, #20]
 8008f6a:	887b      	ldrh	r3, [r7, #2]
 8008f6c:	401a      	ands	r2, r3
 8008f6e:	887b      	ldrh	r3, [r7, #2]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d104      	bne.n	8008f7e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008f74:	887b      	ldrh	r3, [r7, #2]
 8008f76:	041a      	lsls	r2, r3, #16
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008f7c:	e002      	b.n	8008f84 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008f7e:	887a      	ldrh	r2, [r7, #2]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	619a      	str	r2, [r3, #24]
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b086      	sub	sp, #24
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d101      	bne.n	8008fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	e25b      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0301 	and.w	r3, r3, #1
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d075      	beq.n	800909a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fae:	4ba3      	ldr	r3, [pc, #652]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	f003 030c 	and.w	r3, r3, #12
 8008fb6:	2b04      	cmp	r3, #4
 8008fb8:	d00c      	beq.n	8008fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fba:	4ba0      	ldr	r3, [pc, #640]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fc2:	2b08      	cmp	r3, #8
 8008fc4:	d112      	bne.n	8008fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008fc6:	4b9d      	ldr	r3, [pc, #628]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8008fc8:	685b      	ldr	r3, [r3, #4]
 8008fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fd2:	d10b      	bne.n	8008fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fd4:	4b99      	ldr	r3, [pc, #612]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d05b      	beq.n	8009098 <HAL_RCC_OscConfig+0x108>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	685b      	ldr	r3, [r3, #4]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d157      	bne.n	8009098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008fe8:	2301      	movs	r3, #1
 8008fea:	e236      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ff4:	d106      	bne.n	8009004 <HAL_RCC_OscConfig+0x74>
 8008ff6:	4b91      	ldr	r3, [pc, #580]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	4a90      	ldr	r2, [pc, #576]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8008ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009000:	6013      	str	r3, [r2, #0]
 8009002:	e01d      	b.n	8009040 <HAL_RCC_OscConfig+0xb0>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800900c:	d10c      	bne.n	8009028 <HAL_RCC_OscConfig+0x98>
 800900e:	4b8b      	ldr	r3, [pc, #556]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a8a      	ldr	r2, [pc, #552]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009018:	6013      	str	r3, [r2, #0]
 800901a:	4b88      	ldr	r3, [pc, #544]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	4a87      	ldr	r2, [pc, #540]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009024:	6013      	str	r3, [r2, #0]
 8009026:	e00b      	b.n	8009040 <HAL_RCC_OscConfig+0xb0>
 8009028:	4b84      	ldr	r3, [pc, #528]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	4a83      	ldr	r2, [pc, #524]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 800902e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009032:	6013      	str	r3, [r2, #0]
 8009034:	4b81      	ldr	r3, [pc, #516]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a80      	ldr	r2, [pc, #512]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 800903a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800903e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685b      	ldr	r3, [r3, #4]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d013      	beq.n	8009070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009048:	f7ff fcc0 	bl	80089cc <HAL_GetTick>
 800904c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800904e:	e008      	b.n	8009062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009050:	f7ff fcbc 	bl	80089cc <HAL_GetTick>
 8009054:	4602      	mov	r2, r0
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	2b64      	cmp	r3, #100	; 0x64
 800905c:	d901      	bls.n	8009062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800905e:	2303      	movs	r3, #3
 8009060:	e1fb      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009062:	4b76      	ldr	r3, [pc, #472]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800906a:	2b00      	cmp	r3, #0
 800906c:	d0f0      	beq.n	8009050 <HAL_RCC_OscConfig+0xc0>
 800906e:	e014      	b.n	800909a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009070:	f7ff fcac 	bl	80089cc <HAL_GetTick>
 8009074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009076:	e008      	b.n	800908a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009078:	f7ff fca8 	bl	80089cc <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	2b64      	cmp	r3, #100	; 0x64
 8009084:	d901      	bls.n	800908a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009086:	2303      	movs	r3, #3
 8009088:	e1e7      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800908a:	4b6c      	ldr	r3, [pc, #432]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009092:	2b00      	cmp	r3, #0
 8009094:	d1f0      	bne.n	8009078 <HAL_RCC_OscConfig+0xe8>
 8009096:	e000      	b.n	800909a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d063      	beq.n	800916e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090a6:	4b65      	ldr	r3, [pc, #404]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	f003 030c 	and.w	r3, r3, #12
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00b      	beq.n	80090ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090b2:	4b62      	ldr	r3, [pc, #392]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090ba:	2b08      	cmp	r3, #8
 80090bc:	d11c      	bne.n	80090f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090be:	4b5f      	ldr	r3, [pc, #380]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d116      	bne.n	80090f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090ca:	4b5c      	ldr	r3, [pc, #368]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f003 0302 	and.w	r3, r3, #2
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <HAL_RCC_OscConfig+0x152>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68db      	ldr	r3, [r3, #12]
 80090da:	2b01      	cmp	r3, #1
 80090dc:	d001      	beq.n	80090e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e1bb      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090e2:	4b56      	ldr	r3, [pc, #344]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	00db      	lsls	r3, r3, #3
 80090f0:	4952      	ldr	r1, [pc, #328]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80090f2:	4313      	orrs	r3, r2
 80090f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80090f6:	e03a      	b.n	800916e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68db      	ldr	r3, [r3, #12]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d020      	beq.n	8009142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009100:	4b4f      	ldr	r3, [pc, #316]	; (8009240 <HAL_RCC_OscConfig+0x2b0>)
 8009102:	2201      	movs	r2, #1
 8009104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009106:	f7ff fc61 	bl	80089cc <HAL_GetTick>
 800910a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800910c:	e008      	b.n	8009120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800910e:	f7ff fc5d 	bl	80089cc <HAL_GetTick>
 8009112:	4602      	mov	r2, r0
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	1ad3      	subs	r3, r2, r3
 8009118:	2b02      	cmp	r3, #2
 800911a:	d901      	bls.n	8009120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800911c:	2303      	movs	r3, #3
 800911e:	e19c      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009120:	4b46      	ldr	r3, [pc, #280]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0302 	and.w	r3, r3, #2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d0f0      	beq.n	800910e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800912c:	4b43      	ldr	r3, [pc, #268]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	4940      	ldr	r1, [pc, #256]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 800913c:	4313      	orrs	r3, r2
 800913e:	600b      	str	r3, [r1, #0]
 8009140:	e015      	b.n	800916e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009142:	4b3f      	ldr	r3, [pc, #252]	; (8009240 <HAL_RCC_OscConfig+0x2b0>)
 8009144:	2200      	movs	r2, #0
 8009146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009148:	f7ff fc40 	bl	80089cc <HAL_GetTick>
 800914c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800914e:	e008      	b.n	8009162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009150:	f7ff fc3c 	bl	80089cc <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	2b02      	cmp	r3, #2
 800915c:	d901      	bls.n	8009162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800915e:	2303      	movs	r3, #3
 8009160:	e17b      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009162:	4b36      	ldr	r3, [pc, #216]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f003 0302 	and.w	r3, r3, #2
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1f0      	bne.n	8009150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 0308 	and.w	r3, r3, #8
 8009176:	2b00      	cmp	r3, #0
 8009178:	d030      	beq.n	80091dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	695b      	ldr	r3, [r3, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d016      	beq.n	80091b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009182:	4b30      	ldr	r3, [pc, #192]	; (8009244 <HAL_RCC_OscConfig+0x2b4>)
 8009184:	2201      	movs	r2, #1
 8009186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009188:	f7ff fc20 	bl	80089cc <HAL_GetTick>
 800918c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800918e:	e008      	b.n	80091a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009190:	f7ff fc1c 	bl	80089cc <HAL_GetTick>
 8009194:	4602      	mov	r2, r0
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	1ad3      	subs	r3, r2, r3
 800919a:	2b02      	cmp	r3, #2
 800919c:	d901      	bls.n	80091a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800919e:	2303      	movs	r3, #3
 80091a0:	e15b      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091a2:	4b26      	ldr	r3, [pc, #152]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80091a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091a6:	f003 0302 	and.w	r3, r3, #2
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d0f0      	beq.n	8009190 <HAL_RCC_OscConfig+0x200>
 80091ae:	e015      	b.n	80091dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091b0:	4b24      	ldr	r3, [pc, #144]	; (8009244 <HAL_RCC_OscConfig+0x2b4>)
 80091b2:	2200      	movs	r2, #0
 80091b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091b6:	f7ff fc09 	bl	80089cc <HAL_GetTick>
 80091ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091bc:	e008      	b.n	80091d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091be:	f7ff fc05 	bl	80089cc <HAL_GetTick>
 80091c2:	4602      	mov	r2, r0
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	1ad3      	subs	r3, r2, r3
 80091c8:	2b02      	cmp	r3, #2
 80091ca:	d901      	bls.n	80091d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80091cc:	2303      	movs	r3, #3
 80091ce:	e144      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091d0:	4b1a      	ldr	r3, [pc, #104]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80091d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d4:	f003 0302 	and.w	r3, r3, #2
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d1f0      	bne.n	80091be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	f000 80a0 	beq.w	800932a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80091ee:	4b13      	ldr	r3, [pc, #76]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 80091f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d10f      	bne.n	800921a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80091fa:	2300      	movs	r3, #0
 80091fc:	60bb      	str	r3, [r7, #8]
 80091fe:	4b0f      	ldr	r3, [pc, #60]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009202:	4a0e      	ldr	r2, [pc, #56]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 8009204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009208:	6413      	str	r3, [r2, #64]	; 0x40
 800920a:	4b0c      	ldr	r3, [pc, #48]	; (800923c <HAL_RCC_OscConfig+0x2ac>)
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009212:	60bb      	str	r3, [r7, #8]
 8009214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009216:	2301      	movs	r3, #1
 8009218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800921a:	4b0b      	ldr	r3, [pc, #44]	; (8009248 <HAL_RCC_OscConfig+0x2b8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009222:	2b00      	cmp	r3, #0
 8009224:	d121      	bne.n	800926a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009226:	4b08      	ldr	r3, [pc, #32]	; (8009248 <HAL_RCC_OscConfig+0x2b8>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a07      	ldr	r2, [pc, #28]	; (8009248 <HAL_RCC_OscConfig+0x2b8>)
 800922c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009232:	f7ff fbcb 	bl	80089cc <HAL_GetTick>
 8009236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009238:	e011      	b.n	800925e <HAL_RCC_OscConfig+0x2ce>
 800923a:	bf00      	nop
 800923c:	40023800 	.word	0x40023800
 8009240:	42470000 	.word	0x42470000
 8009244:	42470e80 	.word	0x42470e80
 8009248:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800924c:	f7ff fbbe 	bl	80089cc <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	2b02      	cmp	r3, #2
 8009258:	d901      	bls.n	800925e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800925a:	2303      	movs	r3, #3
 800925c:	e0fd      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800925e:	4b81      	ldr	r3, [pc, #516]	; (8009464 <HAL_RCC_OscConfig+0x4d4>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d0f0      	beq.n	800924c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	689b      	ldr	r3, [r3, #8]
 800926e:	2b01      	cmp	r3, #1
 8009270:	d106      	bne.n	8009280 <HAL_RCC_OscConfig+0x2f0>
 8009272:	4b7d      	ldr	r3, [pc, #500]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 8009274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009276:	4a7c      	ldr	r2, [pc, #496]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 8009278:	f043 0301 	orr.w	r3, r3, #1
 800927c:	6713      	str	r3, [r2, #112]	; 0x70
 800927e:	e01c      	b.n	80092ba <HAL_RCC_OscConfig+0x32a>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	689b      	ldr	r3, [r3, #8]
 8009284:	2b05      	cmp	r3, #5
 8009286:	d10c      	bne.n	80092a2 <HAL_RCC_OscConfig+0x312>
 8009288:	4b77      	ldr	r3, [pc, #476]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 800928a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800928c:	4a76      	ldr	r2, [pc, #472]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 800928e:	f043 0304 	orr.w	r3, r3, #4
 8009292:	6713      	str	r3, [r2, #112]	; 0x70
 8009294:	4b74      	ldr	r3, [pc, #464]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 8009296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009298:	4a73      	ldr	r2, [pc, #460]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 800929a:	f043 0301 	orr.w	r3, r3, #1
 800929e:	6713      	str	r3, [r2, #112]	; 0x70
 80092a0:	e00b      	b.n	80092ba <HAL_RCC_OscConfig+0x32a>
 80092a2:	4b71      	ldr	r3, [pc, #452]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 80092a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a6:	4a70      	ldr	r2, [pc, #448]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 80092a8:	f023 0301 	bic.w	r3, r3, #1
 80092ac:	6713      	str	r3, [r2, #112]	; 0x70
 80092ae:	4b6e      	ldr	r3, [pc, #440]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 80092b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092b2:	4a6d      	ldr	r2, [pc, #436]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 80092b4:	f023 0304 	bic.w	r3, r3, #4
 80092b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	689b      	ldr	r3, [r3, #8]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d015      	beq.n	80092ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092c2:	f7ff fb83 	bl	80089cc <HAL_GetTick>
 80092c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092c8:	e00a      	b.n	80092e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092ca:	f7ff fb7f 	bl	80089cc <HAL_GetTick>
 80092ce:	4602      	mov	r2, r0
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	1ad3      	subs	r3, r2, r3
 80092d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80092d8:	4293      	cmp	r3, r2
 80092da:	d901      	bls.n	80092e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80092dc:	2303      	movs	r3, #3
 80092de:	e0bc      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092e0:	4b61      	ldr	r3, [pc, #388]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 80092e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0ee      	beq.n	80092ca <HAL_RCC_OscConfig+0x33a>
 80092ec:	e014      	b.n	8009318 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80092ee:	f7ff fb6d 	bl	80089cc <HAL_GetTick>
 80092f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80092f4:	e00a      	b.n	800930c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092f6:	f7ff fb69 	bl	80089cc <HAL_GetTick>
 80092fa:	4602      	mov	r2, r0
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	1ad3      	subs	r3, r2, r3
 8009300:	f241 3288 	movw	r2, #5000	; 0x1388
 8009304:	4293      	cmp	r3, r2
 8009306:	d901      	bls.n	800930c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e0a6      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800930c:	4b56      	ldr	r3, [pc, #344]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 800930e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d1ee      	bne.n	80092f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009318:	7dfb      	ldrb	r3, [r7, #23]
 800931a:	2b01      	cmp	r3, #1
 800931c:	d105      	bne.n	800932a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800931e:	4b52      	ldr	r3, [pc, #328]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 8009320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009322:	4a51      	ldr	r2, [pc, #324]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 8009324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	699b      	ldr	r3, [r3, #24]
 800932e:	2b00      	cmp	r3, #0
 8009330:	f000 8092 	beq.w	8009458 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009334:	4b4c      	ldr	r3, [pc, #304]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 030c 	and.w	r3, r3, #12
 800933c:	2b08      	cmp	r3, #8
 800933e:	d05c      	beq.n	80093fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	2b02      	cmp	r3, #2
 8009346:	d141      	bne.n	80093cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009348:	4b48      	ldr	r3, [pc, #288]	; (800946c <HAL_RCC_OscConfig+0x4dc>)
 800934a:	2200      	movs	r2, #0
 800934c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800934e:	f7ff fb3d 	bl	80089cc <HAL_GetTick>
 8009352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009354:	e008      	b.n	8009368 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009356:	f7ff fb39 	bl	80089cc <HAL_GetTick>
 800935a:	4602      	mov	r2, r0
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	1ad3      	subs	r3, r2, r3
 8009360:	2b02      	cmp	r3, #2
 8009362:	d901      	bls.n	8009368 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009364:	2303      	movs	r3, #3
 8009366:	e078      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009368:	4b3f      	ldr	r3, [pc, #252]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009370:	2b00      	cmp	r3, #0
 8009372:	d1f0      	bne.n	8009356 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	69da      	ldr	r2, [r3, #28]
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	431a      	orrs	r2, r3
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009382:	019b      	lsls	r3, r3, #6
 8009384:	431a      	orrs	r2, r3
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	3b01      	subs	r3, #1
 800938e:	041b      	lsls	r3, r3, #16
 8009390:	431a      	orrs	r2, r3
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009396:	061b      	lsls	r3, r3, #24
 8009398:	4933      	ldr	r1, [pc, #204]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 800939a:	4313      	orrs	r3, r2
 800939c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800939e:	4b33      	ldr	r3, [pc, #204]	; (800946c <HAL_RCC_OscConfig+0x4dc>)
 80093a0:	2201      	movs	r2, #1
 80093a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093a4:	f7ff fb12 	bl	80089cc <HAL_GetTick>
 80093a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093aa:	e008      	b.n	80093be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093ac:	f7ff fb0e 	bl	80089cc <HAL_GetTick>
 80093b0:	4602      	mov	r2, r0
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	1ad3      	subs	r3, r2, r3
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d901      	bls.n	80093be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e04d      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093be:	4b2a      	ldr	r3, [pc, #168]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d0f0      	beq.n	80093ac <HAL_RCC_OscConfig+0x41c>
 80093ca:	e045      	b.n	8009458 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093cc:	4b27      	ldr	r3, [pc, #156]	; (800946c <HAL_RCC_OscConfig+0x4dc>)
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d2:	f7ff fafb 	bl	80089cc <HAL_GetTick>
 80093d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093d8:	e008      	b.n	80093ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093da:	f7ff faf7 	bl	80089cc <HAL_GetTick>
 80093de:	4602      	mov	r2, r0
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	1ad3      	subs	r3, r2, r3
 80093e4:	2b02      	cmp	r3, #2
 80093e6:	d901      	bls.n	80093ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e036      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80093ec:	4b1e      	ldr	r3, [pc, #120]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1f0      	bne.n	80093da <HAL_RCC_OscConfig+0x44a>
 80093f8:	e02e      	b.n	8009458 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d101      	bne.n	8009406 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009402:	2301      	movs	r3, #1
 8009404:	e029      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009406:	4b18      	ldr	r3, [pc, #96]	; (8009468 <HAL_RCC_OscConfig+0x4d8>)
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	69db      	ldr	r3, [r3, #28]
 8009416:	429a      	cmp	r2, r3
 8009418:	d11c      	bne.n	8009454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009424:	429a      	cmp	r2, r3
 8009426:	d115      	bne.n	8009454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009428:	68fa      	ldr	r2, [r7, #12]
 800942a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800942e:	4013      	ands	r3, r2
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009434:	4293      	cmp	r3, r2
 8009436:	d10d      	bne.n	8009454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8009442:	429a      	cmp	r2, r3
 8009444:	d106      	bne.n	8009454 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8009450:	429a      	cmp	r2, r3
 8009452:	d001      	beq.n	8009458 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e000      	b.n	800945a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8009458:	2300      	movs	r3, #0
}
 800945a:	4618      	mov	r0, r3
 800945c:	3718      	adds	r7, #24
 800945e:	46bd      	mov	sp, r7
 8009460:	bd80      	pop	{r7, pc}
 8009462:	bf00      	nop
 8009464:	40007000 	.word	0x40007000
 8009468:	40023800 	.word	0x40023800
 800946c:	42470060 	.word	0x42470060

08009470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d101      	bne.n	8009484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	e0cc      	b.n	800961e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009484:	4b68      	ldr	r3, [pc, #416]	; (8009628 <HAL_RCC_ClockConfig+0x1b8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	f003 030f 	and.w	r3, r3, #15
 800948c:	683a      	ldr	r2, [r7, #0]
 800948e:	429a      	cmp	r2, r3
 8009490:	d90c      	bls.n	80094ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009492:	4b65      	ldr	r3, [pc, #404]	; (8009628 <HAL_RCC_ClockConfig+0x1b8>)
 8009494:	683a      	ldr	r2, [r7, #0]
 8009496:	b2d2      	uxtb	r2, r2
 8009498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800949a:	4b63      	ldr	r3, [pc, #396]	; (8009628 <HAL_RCC_ClockConfig+0x1b8>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f003 030f 	and.w	r3, r3, #15
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d001      	beq.n	80094ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e0b8      	b.n	800961e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d020      	beq.n	80094fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f003 0304 	and.w	r3, r3, #4
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d005      	beq.n	80094d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80094c4:	4b59      	ldr	r3, [pc, #356]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	4a58      	ldr	r2, [pc, #352]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80094ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80094ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 0308 	and.w	r3, r3, #8
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d005      	beq.n	80094e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80094dc:	4b53      	ldr	r3, [pc, #332]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80094de:	689b      	ldr	r3, [r3, #8]
 80094e0:	4a52      	ldr	r2, [pc, #328]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80094e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80094e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80094e8:	4b50      	ldr	r3, [pc, #320]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	689b      	ldr	r3, [r3, #8]
 80094f4:	494d      	ldr	r1, [pc, #308]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80094f6:	4313      	orrs	r3, r2
 80094f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f003 0301 	and.w	r3, r3, #1
 8009502:	2b00      	cmp	r3, #0
 8009504:	d044      	beq.n	8009590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d107      	bne.n	800951e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800950e:	4b47      	ldr	r3, [pc, #284]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d119      	bne.n	800954e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e07f      	b.n	800961e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	2b02      	cmp	r3, #2
 8009524:	d003      	beq.n	800952e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800952a:	2b03      	cmp	r3, #3
 800952c:	d107      	bne.n	800953e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800952e:	4b3f      	ldr	r3, [pc, #252]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009536:	2b00      	cmp	r3, #0
 8009538:	d109      	bne.n	800954e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800953a:	2301      	movs	r3, #1
 800953c:	e06f      	b.n	800961e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800953e:	4b3b      	ldr	r3, [pc, #236]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f003 0302 	and.w	r3, r3, #2
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e067      	b.n	800961e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800954e:	4b37      	ldr	r3, [pc, #220]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 8009550:	689b      	ldr	r3, [r3, #8]
 8009552:	f023 0203 	bic.w	r2, r3, #3
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	4934      	ldr	r1, [pc, #208]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 800955c:	4313      	orrs	r3, r2
 800955e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009560:	f7ff fa34 	bl	80089cc <HAL_GetTick>
 8009564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009566:	e00a      	b.n	800957e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009568:	f7ff fa30 	bl	80089cc <HAL_GetTick>
 800956c:	4602      	mov	r2, r0
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	f241 3288 	movw	r2, #5000	; 0x1388
 8009576:	4293      	cmp	r3, r2
 8009578:	d901      	bls.n	800957e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800957a:	2303      	movs	r3, #3
 800957c:	e04f      	b.n	800961e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800957e:	4b2b      	ldr	r3, [pc, #172]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	f003 020c 	and.w	r2, r3, #12
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	685b      	ldr	r3, [r3, #4]
 800958a:	009b      	lsls	r3, r3, #2
 800958c:	429a      	cmp	r2, r3
 800958e:	d1eb      	bne.n	8009568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009590:	4b25      	ldr	r3, [pc, #148]	; (8009628 <HAL_RCC_ClockConfig+0x1b8>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f003 030f 	and.w	r3, r3, #15
 8009598:	683a      	ldr	r2, [r7, #0]
 800959a:	429a      	cmp	r2, r3
 800959c:	d20c      	bcs.n	80095b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800959e:	4b22      	ldr	r3, [pc, #136]	; (8009628 <HAL_RCC_ClockConfig+0x1b8>)
 80095a0:	683a      	ldr	r2, [r7, #0]
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095a6:	4b20      	ldr	r3, [pc, #128]	; (8009628 <HAL_RCC_ClockConfig+0x1b8>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f003 030f 	and.w	r3, r3, #15
 80095ae:	683a      	ldr	r2, [r7, #0]
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d001      	beq.n	80095b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80095b4:	2301      	movs	r3, #1
 80095b6:	e032      	b.n	800961e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f003 0304 	and.w	r3, r3, #4
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d008      	beq.n	80095d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80095c4:	4b19      	ldr	r3, [pc, #100]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	68db      	ldr	r3, [r3, #12]
 80095d0:	4916      	ldr	r1, [pc, #88]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f003 0308 	and.w	r3, r3, #8
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d009      	beq.n	80095f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80095e2:	4b12      	ldr	r3, [pc, #72]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80095e4:	689b      	ldr	r3, [r3, #8]
 80095e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	691b      	ldr	r3, [r3, #16]
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	490e      	ldr	r1, [pc, #56]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80095f2:	4313      	orrs	r3, r2
 80095f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80095f6:	f000 f821 	bl	800963c <HAL_RCC_GetSysClockFreq>
 80095fa:	4601      	mov	r1, r0
 80095fc:	4b0b      	ldr	r3, [pc, #44]	; (800962c <HAL_RCC_ClockConfig+0x1bc>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	091b      	lsrs	r3, r3, #4
 8009602:	f003 030f 	and.w	r3, r3, #15
 8009606:	4a0a      	ldr	r2, [pc, #40]	; (8009630 <HAL_RCC_ClockConfig+0x1c0>)
 8009608:	5cd3      	ldrb	r3, [r2, r3]
 800960a:	fa21 f303 	lsr.w	r3, r1, r3
 800960e:	4a09      	ldr	r2, [pc, #36]	; (8009634 <HAL_RCC_ClockConfig+0x1c4>)
 8009610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009612:	4b09      	ldr	r3, [pc, #36]	; (8009638 <HAL_RCC_ClockConfig+0x1c8>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff f994 	bl	8008944 <HAL_InitTick>

  return HAL_OK;
 800961c:	2300      	movs	r3, #0
}
 800961e:	4618      	mov	r0, r3
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
 8009626:	bf00      	nop
 8009628:	40023c00 	.word	0x40023c00
 800962c:	40023800 	.word	0x40023800
 8009630:	0800985c 	.word	0x0800985c
 8009634:	20000000 	.word	0x20000000
 8009638:	20000004 	.word	0x20000004

0800963c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800963c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009642:	2300      	movs	r3, #0
 8009644:	607b      	str	r3, [r7, #4]
 8009646:	2300      	movs	r3, #0
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	2300      	movs	r3, #0
 800964c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800964e:	2300      	movs	r3, #0
 8009650:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009652:	4b63      	ldr	r3, [pc, #396]	; (80097e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009654:	689b      	ldr	r3, [r3, #8]
 8009656:	f003 030c 	and.w	r3, r3, #12
 800965a:	2b04      	cmp	r3, #4
 800965c:	d007      	beq.n	800966e <HAL_RCC_GetSysClockFreq+0x32>
 800965e:	2b08      	cmp	r3, #8
 8009660:	d008      	beq.n	8009674 <HAL_RCC_GetSysClockFreq+0x38>
 8009662:	2b00      	cmp	r3, #0
 8009664:	f040 80b4 	bne.w	80097d0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009668:	4b5e      	ldr	r3, [pc, #376]	; (80097e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800966a:	60bb      	str	r3, [r7, #8]
       break;
 800966c:	e0b3      	b.n	80097d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800966e:	4b5e      	ldr	r3, [pc, #376]	; (80097e8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8009670:	60bb      	str	r3, [r7, #8]
      break;
 8009672:	e0b0      	b.n	80097d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009674:	4b5a      	ldr	r3, [pc, #360]	; (80097e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800967c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800967e:	4b58      	ldr	r3, [pc, #352]	; (80097e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d04a      	beq.n	8009720 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800968a:	4b55      	ldr	r3, [pc, #340]	; (80097e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800968c:	685b      	ldr	r3, [r3, #4]
 800968e:	099b      	lsrs	r3, r3, #6
 8009690:	f04f 0400 	mov.w	r4, #0
 8009694:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009698:	f04f 0200 	mov.w	r2, #0
 800969c:	ea03 0501 	and.w	r5, r3, r1
 80096a0:	ea04 0602 	and.w	r6, r4, r2
 80096a4:	4629      	mov	r1, r5
 80096a6:	4632      	mov	r2, r6
 80096a8:	f04f 0300 	mov.w	r3, #0
 80096ac:	f04f 0400 	mov.w	r4, #0
 80096b0:	0154      	lsls	r4, r2, #5
 80096b2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80096b6:	014b      	lsls	r3, r1, #5
 80096b8:	4619      	mov	r1, r3
 80096ba:	4622      	mov	r2, r4
 80096bc:	1b49      	subs	r1, r1, r5
 80096be:	eb62 0206 	sbc.w	r2, r2, r6
 80096c2:	f04f 0300 	mov.w	r3, #0
 80096c6:	f04f 0400 	mov.w	r4, #0
 80096ca:	0194      	lsls	r4, r2, #6
 80096cc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80096d0:	018b      	lsls	r3, r1, #6
 80096d2:	1a5b      	subs	r3, r3, r1
 80096d4:	eb64 0402 	sbc.w	r4, r4, r2
 80096d8:	f04f 0100 	mov.w	r1, #0
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	00e2      	lsls	r2, r4, #3
 80096e2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80096e6:	00d9      	lsls	r1, r3, #3
 80096e8:	460b      	mov	r3, r1
 80096ea:	4614      	mov	r4, r2
 80096ec:	195b      	adds	r3, r3, r5
 80096ee:	eb44 0406 	adc.w	r4, r4, r6
 80096f2:	f04f 0100 	mov.w	r1, #0
 80096f6:	f04f 0200 	mov.w	r2, #0
 80096fa:	0262      	lsls	r2, r4, #9
 80096fc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8009700:	0259      	lsls	r1, r3, #9
 8009702:	460b      	mov	r3, r1
 8009704:	4614      	mov	r4, r2
 8009706:	4618      	mov	r0, r3
 8009708:	4621      	mov	r1, r4
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f04f 0400 	mov.w	r4, #0
 8009710:	461a      	mov	r2, r3
 8009712:	4623      	mov	r3, r4
 8009714:	f7fe fd58 	bl	80081c8 <__aeabi_uldivmod>
 8009718:	4603      	mov	r3, r0
 800971a:	460c      	mov	r4, r1
 800971c:	60fb      	str	r3, [r7, #12]
 800971e:	e049      	b.n	80097b4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009720:	4b2f      	ldr	r3, [pc, #188]	; (80097e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	099b      	lsrs	r3, r3, #6
 8009726:	f04f 0400 	mov.w	r4, #0
 800972a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800972e:	f04f 0200 	mov.w	r2, #0
 8009732:	ea03 0501 	and.w	r5, r3, r1
 8009736:	ea04 0602 	and.w	r6, r4, r2
 800973a:	4629      	mov	r1, r5
 800973c:	4632      	mov	r2, r6
 800973e:	f04f 0300 	mov.w	r3, #0
 8009742:	f04f 0400 	mov.w	r4, #0
 8009746:	0154      	lsls	r4, r2, #5
 8009748:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800974c:	014b      	lsls	r3, r1, #5
 800974e:	4619      	mov	r1, r3
 8009750:	4622      	mov	r2, r4
 8009752:	1b49      	subs	r1, r1, r5
 8009754:	eb62 0206 	sbc.w	r2, r2, r6
 8009758:	f04f 0300 	mov.w	r3, #0
 800975c:	f04f 0400 	mov.w	r4, #0
 8009760:	0194      	lsls	r4, r2, #6
 8009762:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8009766:	018b      	lsls	r3, r1, #6
 8009768:	1a5b      	subs	r3, r3, r1
 800976a:	eb64 0402 	sbc.w	r4, r4, r2
 800976e:	f04f 0100 	mov.w	r1, #0
 8009772:	f04f 0200 	mov.w	r2, #0
 8009776:	00e2      	lsls	r2, r4, #3
 8009778:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800977c:	00d9      	lsls	r1, r3, #3
 800977e:	460b      	mov	r3, r1
 8009780:	4614      	mov	r4, r2
 8009782:	195b      	adds	r3, r3, r5
 8009784:	eb44 0406 	adc.w	r4, r4, r6
 8009788:	f04f 0100 	mov.w	r1, #0
 800978c:	f04f 0200 	mov.w	r2, #0
 8009790:	02a2      	lsls	r2, r4, #10
 8009792:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009796:	0299      	lsls	r1, r3, #10
 8009798:	460b      	mov	r3, r1
 800979a:	4614      	mov	r4, r2
 800979c:	4618      	mov	r0, r3
 800979e:	4621      	mov	r1, r4
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f04f 0400 	mov.w	r4, #0
 80097a6:	461a      	mov	r2, r3
 80097a8:	4623      	mov	r3, r4
 80097aa:	f7fe fd0d 	bl	80081c8 <__aeabi_uldivmod>
 80097ae:	4603      	mov	r3, r0
 80097b0:	460c      	mov	r4, r1
 80097b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80097b4:	4b0a      	ldr	r3, [pc, #40]	; (80097e0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	0c1b      	lsrs	r3, r3, #16
 80097ba:	f003 0303 	and.w	r3, r3, #3
 80097be:	3301      	adds	r3, #1
 80097c0:	005b      	lsls	r3, r3, #1
 80097c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80097c4:	68fa      	ldr	r2, [r7, #12]
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80097cc:	60bb      	str	r3, [r7, #8]
      break;
 80097ce:	e002      	b.n	80097d6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80097d0:	4b04      	ldr	r3, [pc, #16]	; (80097e4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80097d2:	60bb      	str	r3, [r7, #8]
      break;
 80097d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80097d6:	68bb      	ldr	r3, [r7, #8]
}
 80097d8:	4618      	mov	r0, r3
 80097da:	3714      	adds	r7, #20
 80097dc:	46bd      	mov	sp, r7
 80097de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097e0:	40023800 	.word	0x40023800
 80097e4:	00f42400 	.word	0x00f42400
 80097e8:	007a1200 	.word	0x007a1200

080097ec <__libc_init_array>:
 80097ec:	b570      	push	{r4, r5, r6, lr}
 80097ee:	4e0d      	ldr	r6, [pc, #52]	; (8009824 <__libc_init_array+0x38>)
 80097f0:	4c0d      	ldr	r4, [pc, #52]	; (8009828 <__libc_init_array+0x3c>)
 80097f2:	1ba4      	subs	r4, r4, r6
 80097f4:	10a4      	asrs	r4, r4, #2
 80097f6:	2500      	movs	r5, #0
 80097f8:	42a5      	cmp	r5, r4
 80097fa:	d109      	bne.n	8009810 <__libc_init_array+0x24>
 80097fc:	4e0b      	ldr	r6, [pc, #44]	; (800982c <__libc_init_array+0x40>)
 80097fe:	4c0c      	ldr	r4, [pc, #48]	; (8009830 <__libc_init_array+0x44>)
 8009800:	f000 f820 	bl	8009844 <_init>
 8009804:	1ba4      	subs	r4, r4, r6
 8009806:	10a4      	asrs	r4, r4, #2
 8009808:	2500      	movs	r5, #0
 800980a:	42a5      	cmp	r5, r4
 800980c:	d105      	bne.n	800981a <__libc_init_array+0x2e>
 800980e:	bd70      	pop	{r4, r5, r6, pc}
 8009810:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009814:	4798      	blx	r3
 8009816:	3501      	adds	r5, #1
 8009818:	e7ee      	b.n	80097f8 <__libc_init_array+0xc>
 800981a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800981e:	4798      	blx	r3
 8009820:	3501      	adds	r5, #1
 8009822:	e7f2      	b.n	800980a <__libc_init_array+0x1e>
 8009824:	08009874 	.word	0x08009874
 8009828:	08009874 	.word	0x08009874
 800982c:	08009874 	.word	0x08009874
 8009830:	08009878 	.word	0x08009878

08009834 <memset>:
 8009834:	4402      	add	r2, r0
 8009836:	4603      	mov	r3, r0
 8009838:	4293      	cmp	r3, r2
 800983a:	d100      	bne.n	800983e <memset+0xa>
 800983c:	4770      	bx	lr
 800983e:	f803 1b01 	strb.w	r1, [r3], #1
 8009842:	e7f9      	b.n	8009838 <memset+0x4>

08009844 <_init>:
 8009844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009846:	bf00      	nop
 8009848:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800984a:	bc08      	pop	{r3}
 800984c:	469e      	mov	lr, r3
 800984e:	4770      	bx	lr

08009850 <_fini>:
 8009850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009852:	bf00      	nop
 8009854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009856:	bc08      	pop	{r3}
 8009858:	469e      	mov	lr, r3
 800985a:	4770      	bx	lr
